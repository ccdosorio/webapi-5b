// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using webapi_5b;

#nullable disable

namespace webapi_5b.Migrations
{
    [DbContext(typeof(AssignmentsContext))]
    partial class AssignmentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("webapi_5b.Models.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AssignmentPriority")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignment", (string)null);

                    b.HasData(
                        new
                        {
                            AssignmentId = new Guid("74b5d8e3-f076-45ee-8981-9236c7d86895"),
                            AssignmentPriority = 2,
                            CategoryId = new Guid("ea6202de-5314-4ce0-903b-94fa7c8ef5ed"),
                            Description = "Descripción de la tarea 1",
                            Title = "Tarea 1",
                            UserId = new Guid("956f8f95-d67a-4501-96c6-b362fada236d")
                        },
                        new
                        {
                            AssignmentId = new Guid("0cc233a3-1739-44c1-9c1b-63ed5192b9a3"),
                            AssignmentPriority = 1,
                            CategoryId = new Guid("1bbc3cae-8cea-48e1-9ba4-07ec45d981e0"),
                            Description = "Descripción de la tarea 2",
                            Title = "Tarea 2",
                            UserId = new Guid("46c33b69-cccf-44cb-99f3-d74454f77dc1")
                        });
                });

            modelBuilder.Entity("webapi_5b.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("ea6202de-5314-4ce0-903b-94fa7c8ef5ed"),
                            Description = "Tareas relacionadas con tu empleo, proyectos, reuniones, etc.",
                            Name = "Trabajo"
                        },
                        new
                        {
                            CategoryId = new Guid("1bbc3cae-8cea-48e1-9ba4-07ec45d981e0"),
                            Description = "Tareas relacionadas con la escuela, universidad, cursos, exámenes, etc.",
                            Name = "Estudios"
                        },
                        new
                        {
                            CategoryId = new Guid("e530a381-1f4e-4f02-b04e-506e9e3ed818"),
                            Description = "Tareas domésticas como limpieza, compras, mantenimiento, etc.",
                            Name = "Hogar"
                        },
                        new
                        {
                            CategoryId = new Guid("8e50a50e-7347-458d-9b14-87b47a19103d"),
                            Description = "Tareas relacionadas con el ejercicio, la nutrición, las citas médicas, etc.",
                            Name = "Salud"
                        },
                        new
                        {
                            CategoryId = new Guid("6541e05c-69a6-4829-b037-86ddc19b1240"),
                            Description = "Tareas relacionadas con el presupuesto, pagos, inversiones, etc.",
                            Name = "Finanzas"
                        },
                        new
                        {
                            CategoryId = new Guid("4d7d29b4-f1c8-44f5-882b-14f0d586392f"),
                            Description = "Tareas relacionadas con eventos, reuniones con amigos, actividades sociales, etc.",
                            Name = "Social"
                        },
                        new
                        {
                            CategoryId = new Guid("06c65d54-2c86-40f7-ba8e-d0265486f1b5"),
                            Description = "Tareas relacionadas con el autocuidado, el desarrollo personal, pasatiempos, etc.",
                            Name = "Personal"
                        },
                        new
                        {
                            CategoryId = new Guid("9d728f3a-903b-4ba1-88c3-9f171b84b5a6"),
                            Description = "Tareas relacionadas con la planificación de viajes, reservas, preparativos, etc.",
                            Name = "Viajes"
                        },
                        new
                        {
                            CategoryId = new Guid("cb0ee61c-b0f3-439a-9315-3f2f589f71e0"),
                            Description = "Tareas relacionadas con proyectos personales o pasatiempos específicos.",
                            Name = "Proyectos personales"
                        },
                        new
                        {
                            CategoryId = new Guid("c2643f9a-06fd-4cc8-a95a-44d63536aa3a"),
                            Description = "Tareas que son simplemente recordatorios generales sin una categoría específica.",
                            Name = "Recordatorios"
                        });
                });

            modelBuilder.Entity("webapi_5b.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("956f8f95-d67a-4501-96c6-b362fada236d"),
                            Name = "Usuario 5B",
                            Password = "user5b",
                            Username = "user5b"
                        },
                        new
                        {
                            UserId = new Guid("46c33b69-cccf-44cb-99f3-d74454f77dc1"),
                            Name = "Christian Osorio",
                            Password = "cosorio",
                            Username = "cosorio"
                        });
                });

            modelBuilder.Entity("webapi_5b.Models.Assignment", b =>
                {
                    b.HasOne("webapi_5b.Models.Category", "Category")
                        .WithMany("Assignments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi_5b.Models.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("webapi_5b.Models.Category", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("webapi_5b.Models.User", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
